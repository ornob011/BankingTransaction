package com.banking.controllers;

import com.banking.helpers.HTML;
import com.banking.helpers.Token;
import com.banking.mailMessenger.MailMessenger;
import com.banking.models.User;
import com.banking.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;
import org.springframework.security.crypto.bcrypt.BCrypt;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;
import javax.mail.MessagingException;
import javax.validation.Valid;
import java.util.Random;

@Configuration // Defines the configuration for the data source used by the application context.
@PropertySource("classpath:application.properties") // Used to load the properties file.
@Component // Represents service for managing email configuration.
@Controller // This means that this class is a Controller.
public class RegisterController { // Register Controller Class.

    // Get the email username from the application.properties file.
    @Value("${email.username}")
    private String emailUsername;

    @Autowired // This means to get the bean called userRepository.
    private UserRepository userRepository; // Which is auto-generated by Spring, we will use it to handle the data.

    @Autowired  // This means to get the bean called mailMessenger.
    private MailMessenger mailMessenger; // Which is auto-generated by Spring, we will use it to send email.

    @GetMapping("/register") // Map ONLY GET Requests.
    public ModelAndView getRegister() { // Get Register Page.
        ModelAndView getRegisterPage = new ModelAndView("register"); // Create ModelAndView Object.
        System.out.println("In Register Page Controller");
        getRegisterPage.addObject("PageTitle", "Register");
        return getRegisterPage;
    }
    // End Of Get Register Page Method.

    // Register User.
    @PostMapping("/register") // Map ONLY POST Requests.
    public ModelAndView register(@Valid @ModelAttribute("registerUser") User user,
                                 BindingResult result,
                                 @RequestParam("first_name") String first_name,
                                 @RequestParam("last_name") String last_name,
                                 @RequestParam("email") String email,
                                 @RequestParam("password") String password,
                                 @RequestParam("confirm_password") String confirm_password) throws MessagingException {

        ModelAndView registrationPage = new ModelAndView("register"); // Create ModelAndView Object.

        // Check for errors.
        if (result.hasErrors() && confirm_password.isEmpty()) {
            registrationPage.addObject("confirm_pass", "The confirm Field is required");
            return registrationPage;
        }

        // Check for password mismatch.
        if (!password.equals(confirm_password)) {
            registrationPage.addObject("passwordMisMatch", "passwords do not match");
            return registrationPage;
        }

        // Get Token String.
        String token = Token.generateToken();

        // Generate Random Code.
        Random rand = new Random();
        int bound = 123;
        int code = bound * rand.nextInt(bound);

        // Get Email Body.
        String emailBody = HTML.htmlEmailTemplate(token, code);

        // Hash Password.
        String hashed_password = BCrypt.hashpw(password, BCrypt.gensalt());

        // Register User.
        userRepository.registerUser(first_name, last_name, email, hashed_password, token, code);

        // Send Email Notification.
        mailMessenger.htmlEmailMessenger(emailUsername, email, "Verify Account", emailBody);

        // Return to Registration Page.
        String successMessage = "Account Registered Successfully, Please Check your Email and Verify Account!";
        registrationPage.addObject("success", successMessage);
        return registrationPage;
    }
    // End Of Register User Method.
}
